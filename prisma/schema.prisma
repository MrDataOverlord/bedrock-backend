generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// Core
// =======================

model Device {
  id        String   @id @default(cuid())
  deviceId  String
  platform  String
  pushToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String?
  totpSecret    String?
  createdAt     DateTime @default(now())

  ownedOrgs      Org[]
  memberships    Member[]
  passwordTokens PasswordToken[]
}

model Org {
  id               String   @id @default(cuid())
  ownerUserId      String?          // optional so webhooks can create org first
  name             String   @default("My Org")
  createdAt        DateTime @default(now())

  // Required by server.js to link Stripe customer to this org
  stripeCustomerId String?  @unique

  owner         User?          @relation(fields: [ownerUserId], references: [id])
  members       Member[]
  subscriptions Subscription[]

  @@index([ownerUserId])
}

model Member {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  role      String   @default("owner")
  createdAt DateTime @default(now())

  org  Org  @relation(fields: [orgId], references: [id])
  user User @relation(fields: [userId], references: [id])

  // used by server.js upsert(where: { orgId_userId: { ... } })
  @@unique([orgId, userId], name: "orgId_userId")
  @@index([orgId])
  @@index([userId])
}

// =======================
// Password / Registration
// =======================

model PasswordToken {
  id        String    @id @default(cuid())
  userId    String
  purpose   String      // 'register' | 'reset'
  tokenHash String      @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime    @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

// =======================
// Billing
// =======================

model Subscription {
  id               String    @id                // we store "stripe_<subId>"
  orgId            String
  provider         String                         // "stripe"
  status           String
  currentPeriodEnd DateTime?
  customerId       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  org Org @relation(fields: [orgId], references: [id])

  @@index([orgId])
  @@index([provider])
}
