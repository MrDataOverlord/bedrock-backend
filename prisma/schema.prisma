// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ---------- Core ---------- */

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  passwordHash   String?
  totpSecret     String?
  createdAt      DateTime         @default(now())

  // Relations
  ownedOrgs      Org[]            @relation("OrgOwner")
  memberships    Member[]
  passwordTokens PasswordToken[]
}

model Org {
  id          String         @id @default(cuid())
  ownerUserId String
  name        String         @default("My Org")
  createdAt   DateTime       @default(now())

  // Relations
  owner         User         @relation("OrgOwner", fields: [ownerUserId], references: [id], onDelete: Cascade)
  members       Member[]
  subscriptions Subscription[]

  @@index([ownerUserId])
}

model Member {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  role      String   @default("owner")
  createdAt DateTime @default(now())

  // Relations
  org  Org  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
  @@index([orgId])
  @@index([userId])
}

/* ---------- Password / Registration ---------- */

model PasswordToken {
  id         String   @id @default(cuid())
  userId     String
  purpose    String   // "register" | "reset"
  tokenHash  String   @unique
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/* ---------- Billing ---------- */

model Subscription {
  id               String    @id                // store "stripe_<subId>" here
  orgId            String
  provider         String                          // "stripe"
  status           String                          // "active" | "trialing" | etc.
  currentPeriodEnd DateTime?
  customerId       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  org Org @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([provider])
}
